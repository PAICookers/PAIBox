from typing import overload, Tuple

class Coord:
    x: int = ...
    y: int = ...
    def __init__(self, x: int, y: int) -> None: ...
    @classmethod
    def from_tuple(cls, pos): ...
    def __add__(self, other: CoordOffset) -> Coord: ...
    def __iadd__(self, other: CoordOffset) -> Coord: ...
    @overload
    def __sub__(self, other: Coord) -> CoordOffset: ...
    @overload
    def __sub__(self, other: CoordOffset) -> Coord: ...
    def __isub__(self, other: CoordOffset) -> Coord: ...
    def __eq__(self, other: Coord) -> bool: ...
    def __ne__(self, other: Coord) -> bool: ...
    def __lt__(self, other: Coord) -> bool: ...
    def __gt__(self, other: Coord) -> bool: ...
    def __le__(self, other: Coord) -> bool: ...
    def __ge__(self, other: Coord) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def _to_address(self) -> int: ...
    @property
    def address(self) -> int: ...

class CoordOffset:
    @overload
    def __add__(self, other: Coord) -> Coord: ...
    @overload
    def __add__(self, other: CoordOffset) -> CoordOffset: ...
    def __iadd__(self, other: CoordOffset) -> CoordOffset: ...
    def __sub__(self, other: CoordOffset) -> CoordOffset: ...
    def __isub__(self, other: CoordOffset) -> CoordOffset: ...
    def __eq__(self, other: CoordOffset) -> bool: ...
    def __ne__(self, other: CoordOffset) -> bool: ...
