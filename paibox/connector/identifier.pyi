from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Tuple, overload

class _Identifier(ABC):
    @abstractmethod
    def __eq__(self, __other) -> ...: ...
    @abstractmethod
    def __ne__(self, __other) -> ...: ...

@dataclass(frozen=True)
class Coord(_Identifier):
    x: int = ...
    y: int = ...
    def __init__(self, x: int, y: int) -> None: ...
    @classmethod
    def from_tuple(cls, pos) -> Coord: ...
    @classmethod
    def default(cls) -> Coord: ...
    def __add__(self, __other: CoordOffset) -> Coord: ...
    @overload
    def __sub__(self, __other: Coord) -> CoordOffset: ...
    @overload
    def __sub__(self, __other: CoordOffset) -> Coord: ...
    def __eq__(self, __other: Coord) -> bool: ...
    def __ne__(self, __other: Coord) -> bool: ...
    def __lt__(self, __other: Coord) -> bool: ...
    def __gt__(self, __other: Coord) -> bool: ...
    def __le__(self, __other: Coord) -> bool: ...
    def __ge__(self, __other: Coord) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def _to_address(self) -> int: ...
    @property
    def address(self) -> int: ...

class CoordOffset:
    delta_x: int = ...
    delta_y: int = ...
    def __init__(self, delta_x: int, delta_y: int) -> None: ...
    @overload
    def __add__(self, __other: Coord) -> Coord: ...
    @overload
    def __add__(self, __other: CoordOffset) -> CoordOffset: ...
    def __iadd__(self, __other: CoordOffset) -> CoordOffset: ...
    def __sub__(self, __other: CoordOffset) -> CoordOffset: ...
    def __isub__(self, __other: CoordOffset) -> CoordOffset: ...
    def __eq__(self, __other: CoordOffset) -> bool: ...
    def __ne__(self, __other: CoordOffset) -> bool: ...

@dataclass(frozen=True)
class NeuronId(_Identifier):
    core_id: Coord = ...
    id: int = ...

    def __init__(self, core_id: Coord, id: int) -> None: ...
    @classmethod
    def default(cls) -> NeuronId: ...
    def __eq__(self, __other: NeuronId) -> bool: ...
    def __ne__(self, __other: NeuronId) -> bool: ...
    def __repr__(self) -> str: ...

@dataclass(frozen=True)
class AxonId(_Identifier):
    core_id: Coord = ...
    id: int = ...

    def __init__(self, core_id: Coord, id: int) -> None: ...
    @classmethod
    def default(cls) -> AxonId: ...
    def __eq__(self, __other: AxonId) -> bool: ...
    def __ne__(self, __other: AxonId) -> bool: ...
    def __repr__(self) -> str: ...

@dataclass(frozen=True)
class PinId(_Identifier):
    conn_id: int = ...
    id: int = ...

    def __init__(self, conn_id: int, id: int) -> None: ...
    @classmethod
    def default(cls) -> PinId: ...
    def __eq__(self, __other: PinId) -> bool: ...
    def __ne__(self, __other: PinId) -> bool: ...
    def __repr__(self) -> str: ...
