[
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Flag",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "pydantic.dataclasses",
        "description": "pydantic.dataclasses",
        "isExtraImport": true,
        "detail": "pydantic.dataclasses",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PrivateAttr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "params_types",
        "description": "params_types",
        "isExtraImport": true,
        "detail": "params_types",
        "documentation": {}
    },
    {
        "label": "CoreMode",
        "importPath": "_core_mode",
        "description": "_core_mode",
        "isExtraImport": true,
        "detail": "_core_mode",
        "documentation": {}
    },
    {
        "label": "FrameMask",
        "importPath": "frame_params",
        "description": "frame_params",
        "isExtraImport": true,
        "detail": "frame_params",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "frame_params",
        "description": "frame_params",
        "isExtraImport": true,
        "detail": "frame_params",
        "documentation": {}
    },
    {
        "label": "Coord",
        "importPath": "coord",
        "description": "coord",
        "isExtraImport": true,
        "detail": "coord",
        "documentation": {}
    },
    {
        "label": "Coord",
        "importPath": "paibox.frame.coord",
        "description": "paibox.frame.coord",
        "isExtraImport": true,
        "detail": "paibox.frame.coord",
        "documentation": {}
    },
    {
        "label": "Coord",
        "kind": 6,
        "importPath": "paibox.core.coord",
        "description": "paibox.core.coord",
        "peekOfCode": "class Coord:\n    \"\"\"Coordinates of the cores.\n    NOTE: Set coordinates (x, y) for every cores. Left to right, +X, up to down, +Y.\n    \"\"\"\n    _COORD_MAX_LIMIT = 32\n    _COORD_LOW_LIMIT = 0\n    x: int\n    y: int\n    @field_validator(\"x\", \"y\", mode=\"before\")\n    def _coord_range_limit(cls, v: int) -> int:",
        "detail": "paibox.core.coord",
        "documentation": {}
    },
    {
        "label": "CoordOffset",
        "kind": 6,
        "importPath": "paibox.core.coord",
        "description": "paibox.core.coord",
        "peekOfCode": "class CoordOffset(Coord):\n    \"\"\"Offset of coordinates\"\"\"\n    _COORDOFFSET_MAX_LIMIT = 32\n    _COORDOFFSET_LOW_LIMIT = -32\n    def __init__(self, _x: int, _y: int) -> None:\n        if not (\n            self._COORDOFFSET_LOW_LIMIT < _x < self._COORDOFFSET_MAX_LIMIT\n            and self._COORDOFFSET_LOW_LIMIT < _y < self._COORDOFFSET_MAX_LIMIT\n        ):\n            raise ValueError(",
        "detail": "paibox.core.coord",
        "documentation": {}
    },
    {
        "label": "BitStatusType",
        "kind": 6,
        "importPath": "paibox.core.coord",
        "description": "paibox.core.coord",
        "peekOfCode": "class BitStatusType(Enum):\n    ZERO = 0\n    ONE = 1\n    ANY = 2\nclass ReplicationID(Coord):\n    status: BitStatusType\n    # TODO\nif __name__ == \"__main__\":\n    c = Coord.from_tuple((2, 31))\n    print(c)",
        "detail": "paibox.core.coord",
        "documentation": {}
    },
    {
        "label": "ReplicationID",
        "kind": 6,
        "importPath": "paibox.core.coord",
        "description": "paibox.core.coord",
        "peekOfCode": "class ReplicationID(Coord):\n    status: BitStatusType\n    # TODO\nif __name__ == \"__main__\":\n    c = Coord.from_tuple((2, 31))\n    print(c)",
        "detail": "paibox.core.coord",
        "documentation": {}
    },
    {
        "label": "ParamsReg",
        "kind": 6,
        "importPath": "paibox.core.core_defs",
        "description": "paibox.core.core_defs",
        "peekOfCode": "class ParamsReg(BaseModel, extra=\"ignore\", validate_assignment=True):\n    \"\"\"Parameter model of register parameters listed in Section 2.4.1\"\"\"\n    _WEIGHT_PRECISION_BIT_MAX = 2\n    _LCN_EXTENSION_BIT_MAX = 2\n    _INPUT_WIDTH_FORMAT_BIT_MAX = 2\n    _SPIKE_WIDTH_FORMAT_BIT_MAX = 2\n    _NEURON_NUM_BIT_MAX = 13\n    _POOL_MAX_EN_BIT_MAX = 1\n    _TICK_WAIT_START_BIT_MAX = 15\n    _TICK_WAIT_END_BIT_MAX = 15",
        "detail": "paibox.core.core_defs",
        "documentation": {}
    },
    {
        "label": "ParamsRAM",
        "kind": 6,
        "importPath": "paibox.core.core_defs",
        "description": "paibox.core.core_defs",
        "peekOfCode": "class ParamsRAM(BaseModel, extra=\"ignore\", validate_assignment=True):\n    \"\"\"Parameter model of RAM parameters listed in Section 2.4.2\"\"\"\n    _TICK_RELATIVE_BIT_MAX = 8\n    _ADDR_AXON_BIT_MAX = 11\n    _ADDR_CORE_X_BIT_MAX = 5\n    _ADDR_CORE_Y_BIT_MAX = 5\n    _ADDR_CORE_X_EX_BIT_MAX = 5\n    _ADDR_CORE_Y_EX_BIT_MAX = 5\n    _ADDR_CHIP_X_BIT_MAX = 5\n    _ADDR_CHIP_Y_BIT_MAX = 5",
        "detail": "paibox.core.core_defs",
        "documentation": {}
    },
    {
        "label": "get_core_mode",
        "kind": 2,
        "importPath": "paibox.core.core_defs",
        "description": "paibox.core.core_defs",
        "peekOfCode": "def get_core_mode(\n    iwidth_format: InputWidthFormatType,\n    swidth_format: SpikeWidthFormatType,\n    snn_en: SNNModeEnableType,\n) -> CoreMode:\n    if iwidth_format is InputWidthFormatType.INPUT_WIDTH_1BIT:\n        if swidth_format is SpikeWidthFormatType.SPIKE_WIDTH_1BIT:\n            if snn_en is SNNModeEnableType.SNN_MODE_DISABLE:\n                # 0 / 0 / 0\n                return CoreMode.MODE_BANN",
        "detail": "paibox.core.core_defs",
        "documentation": {}
    },
    {
        "label": "WeightPrecisionType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class WeightPrecisionType(Enum):\n    \"\"\"Weight precision of crossbar. 2-bit.\n    `WEIGHT_WIDTH_XBIT` for X-bit.\n    \"\"\"\n    WEIGHT_WIDTH_1BIT = 0\n    WEIGHT_WIDTH_2BIT = 1\n    WEIGHT_WIDTH_4BIT = 2\n    WEIGHT_WIDTH_8BIT = 3  # Default value.\n@unique\nclass LCNExtensionType(Enum):",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "LCNExtensionType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class LCNExtensionType(Enum):\n    \"\"\"Scale of Fan-in extension. 4-bit.\n    - For ANN mode, LCN_1X = 144x.\n    - For BANN/SNN mode, LCN_1X = 1152x.\n    \"\"\"\n    LCN_1X = 0  # Default value.\n    LCN_2X = 1\n    LCN_4X = 2\n    LCN_8X = 3\n    LCN_16X = 4",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "InputWidthFormatType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class InputWidthFormatType(Enum):\n    \"\"\"Format of input spike. 1-bit.\n    - `INPUT_WIDTH_1BIT`: 1-bit spikes, 0.\n    - `INPUT_WIDTH_8BIT`: 8-bit activation.\n    \"\"\"\n    INPUT_WIDTH_1BIT = 0  # Default value.\n    INPUT_WIDTH_8BIT = 1\n@unique\nclass SpikeWidthFormatType(Enum):\n    \"\"\"Format of output spike. 1-bit.",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "SpikeWidthFormatType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class SpikeWidthFormatType(Enum):\n    \"\"\"Format of output spike. 1-bit.\n    - `SPIKE_WIDTH_1BIT`: 1-bit spikes, 0.\n    - `SPIKE_WIDTH_8BIT`: 8-bit activation.\n    \"\"\"\n    SPIKE_WIDTH_1BIT = 0  # Default value.\n    SPIKE_WIDTH_8BIT = 1\n@unique\nclass PoolMaxEnableType(Enum):\n    \"\"\"Enable max pooling or not in 8-bit input format. 1-bit.",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "PoolMaxEnableType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class PoolMaxEnableType(Enum):\n    \"\"\"Enable max pooling or not in 8-bit input format. 1-bit.\n    - `POOL_MAX_DISABLE`: pooling max disable, 0.\n    - `POOL_MAX_ENABLE`: pooling max enable.\n    \"\"\"\n    POOL_MAX_DISABLE = 0\n    POOL_MAX_ENABLE = 1  # Default value.\n@unique\nclass SNNModeEnableType(Enum):\n    \"\"\"Enable SNN mode or not. 1-bit.",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "SNNModeEnableType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class SNNModeEnableType(Enum):\n    \"\"\"Enable SNN mode or not. 1-bit.\n    - `SNN_MODE_DISABLE`: SNN mode disable, 0.\n    - `SNN_MODE_ENABLE`: SNN mode enable.\n    \"\"\"\n    SNN_MODE_DISABLE = 0\n    SNN_MODE_ENABLE = 1  # Default value.\n\"\"\"\n    Type defines of RAM parameters.\n    See Section 2.4.2 in V2.1 Manual for details.",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "CoreAddrX_EX_Type",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class CoreAddrX_EX_Type(Flag):\n    \"\"\"\n    Broadcast address X of the destination code.\n    询问钟这个是否是核间路由\n    通过flag的或的方式，获得路由的规则，从而实现*通配符的等效替代\n    Usage:\n    NOTE: *addr_core_x_ex* in Section 2.4.2.\n    \"\"\"\n    pass\n@unique",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "ResetModeType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class ResetModeType(Enum):\n    \"\"\"Reset modes of cores. 2-bit.\n    - MODE_NORMAL: normal mode.\n    - MODE_LINEAR: linear mode.\n    - MODE_NONRESET: non-reset mode.\n    NOTE: *reset_mode*\n    \"\"\"\n    MODE_NORMAL = 0  # Default value.\n    MODE_LINEAR = 1\n    MODE_NONRESET = 2",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "LeakingComparisonType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class LeakingComparisonType(Enum):\n    \"\"\"Leak after comparison or before. 1-bit.\n    - LEAK_BEFORE_COMP: leak before comparison.\n    - LEAK_AFTER_COMP: leak after comparison.\n    NOTE: *leak_post*\n    \"\"\"\n    LEAK_BEFORE_COMP = 0\n    LEAK_AFTER_COMP = 1  # Default value.\n@unique\nclass NegativeThresModeType(Enum):",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "NegativeThresModeType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class NegativeThresModeType(Enum):\n    \"\"\"Modes of negative threshold. 1-bit.\n    - MODE_RESET: reset mode.\n    - MODE_SATURATION: saturation mode.\n    NOTE: *threshold_neg_mode*\n    \"\"\"\n    MODE_RESET = 0  # Default value.\n    MODE_SATURATION = 1\n@unique\nclass LeakingDirectionType(Enum):",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "LeakingDirectionType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class LeakingDirectionType(Enum):\n    \"\"\"Direction of leaking, forward or reversal.\n    - MODE_FORWARD: forward leaking.\n    - MODE_REVERSAL: reversal leaking.\n    NOTE: *leak_reversal_flag*\n    \"\"\"\n    MODE_FORWARD = 0  # Default value.\n    MODE_REVERSAL = 1\n@unique\nclass LeakingModeType(Enum):",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "LeakingModeType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class LeakingModeType(Enum):\n    \"\"\"Modes of leaking, deterministic or stochastic.\n    - MODE_DETERMINISTIC: deterministic leaking.\n    - MODE_STOCHASTIC: stochastic leaking.\n    NOTE: *leak_det_stoch*\n    \"\"\"\n    MODE_DETERMINISTIC = 0  # Default value.\n    MODE_STOCHASTIC = 1\n@unique\nclass WeightModeType(Enum):",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "WeightModeType",
        "kind": 6,
        "importPath": "paibox.core.params_types",
        "description": "paibox.core.params_types",
        "peekOfCode": "class WeightModeType(Enum):\n    \"\"\"Modes of weights, deterministic or stochastic.\n    - MODE_DETERMINISTIC: deterministic weights\n    - MODE_STOCHASTIC: stochastic weights\n    NOTE: *weight_det_stoch*\n    \"\"\"\n    MODE_DETERMINISTIC = 0  # Default value.\n    MODE_STOCHASTIC = 1\nif __name__ == \"__main__\":\n    a = LCNExtensionType.LCN_32X",
        "detail": "paibox.core.params_types",
        "documentation": {}
    },
    {
        "label": "CoreMode",
        "kind": 6,
        "importPath": "paibox.core._core_mode",
        "description": "paibox.core._core_mode",
        "peekOfCode": "class CoreMode(Enum):\n    \"\"\"Working mode of core.\n    Decided by `input_width`, `spike_width` and `SNN_EN` of core parameters registers.\n    NOTE: See table below for details.\n    Mode            input_width    spike_width    SNN_EN\n    BANN                0               0           0\n    SNN                 0               0           1\n    BANN/SNN to ANN     0               1           0\n    BANN/SNN to SNN     0               1           1\n    ANN to BANN/SNN     1               0       Don't care",
        "detail": "paibox.core._core_mode",
        "documentation": {}
    },
    {
        "label": "Coord",
        "kind": 6,
        "importPath": "paibox.frame.coord",
        "description": "paibox.frame.coord",
        "peekOfCode": "class Coord:\n    \"\"\"Coordinate class\"\"\"\n    def __init__(\n        self, _x: Union[Tuple[int, int], int], _y: Optional[int] = None\n    ) -> None:\n        if isinstance(_x, Tuple):\n            x, y = _x[0], _x[1]\n            if isinstance(_y, int):\n                raise ValueError(f\"Wrong Argument: {_y}\")\n        elif isinstance(_x, int):",
        "detail": "paibox.frame.coord",
        "documentation": {}
    },
    {
        "label": "CoordOffset",
        "kind": 6,
        "importPath": "paibox.frame.coord",
        "description": "paibox.frame.coord",
        "peekOfCode": "class CoordOffset(Coord):\n    \"\"\"Coordinate offset class\"\"\"\n    def __init__(self, _x: int, _y: int) -> None:\n        if not (-32 < _x < 32 and -32 < _y < 32):\n            raise ValueError(f\"-32 < x < 32, -32 < y < 32: ({_x}, {_y})\")\n        self.x, self.y = _x, _y\n    def __add__(self, other):\n        if isinstance(other, CoordOffset):\n            return CoordOffset(self.x + other.x, self.y + other.y)\n        else:",
        "detail": "paibox.frame.coord",
        "documentation": {}
    },
    {
        "label": "FrameGen",
        "kind": 6,
        "importPath": "paibox.frame.frame",
        "description": "paibox.frame.frame",
        "peekOfCode": "class FrameGen:\n    # 通用Frame生成函数\n    @staticmethod\n    def _GenFrame(\n        header: int, chip_addr: int, core_addr: int, core_ex_addr: int, payload: int\n    ) -> int:\n        header = header & FrameMask.GENERAL_HEADER_MASK\n        chip_addr = chip_addr & FrameMask.GENERAL_CHIP_ADDR_MASK\n        core_addr = core_addr & FrameMask.GENERAL_CORE_ADDR_MASK\n        core_ex_addr = core_ex_addr & FrameMask.GENERAL_CORE_EX_ADDR_MASK",
        "detail": "paibox.frame.frame",
        "documentation": {}
    },
    {
        "label": "Coord2Addr",
        "kind": 2,
        "importPath": "paibox.frame.frame",
        "description": "paibox.frame.frame",
        "peekOfCode": "def Coord2Addr(coord: Coord) -> int:\n    return (coord.x << 5) | coord.y\ndef Addr2Coord(addr: int) -> Coord:\n    return Coord(addr >> 5, addr & ((1 << 5) - 1))\n# 用于配置帧2型配置各个寄存器参数，tick_wait_start、test_chip_addr进行了拆分\ndef config_frame2_split(x: int, high: int, low: int) -> Tuple[int, int]:\n    highbit = x >> (low)\n    lowbit_mask = (1 << (low)) - 1\n    lowbit = x & lowbit_mask\n    return highbit, lowbit",
        "detail": "paibox.frame.frame",
        "documentation": {}
    },
    {
        "label": "Addr2Coord",
        "kind": 2,
        "importPath": "paibox.frame.frame",
        "description": "paibox.frame.frame",
        "peekOfCode": "def Addr2Coord(addr: int) -> Coord:\n    return Coord(addr >> 5, addr & ((1 << 5) - 1))\n# 用于配置帧2型配置各个寄存器参数，tick_wait_start、test_chip_addr进行了拆分\ndef config_frame2_split(x: int, high: int, low: int) -> Tuple[int, int]:\n    highbit = x >> (low)\n    lowbit_mask = (1 << (low)) - 1\n    lowbit = x & lowbit_mask\n    return highbit, lowbit\n# 配置帧2型 est_chip_addr拆分\ndef test_chip_coord_split(coord: Coord) -> Tuple[int, int]:",
        "detail": "paibox.frame.frame",
        "documentation": {}
    },
    {
        "label": "config_frame2_split",
        "kind": 2,
        "importPath": "paibox.frame.frame",
        "description": "paibox.frame.frame",
        "peekOfCode": "def config_frame2_split(x: int, high: int, low: int) -> Tuple[int, int]:\n    highbit = x >> (low)\n    lowbit_mask = (1 << (low)) - 1\n    lowbit = x & lowbit_mask\n    return highbit, lowbit\n# 配置帧2型 est_chip_addr拆分\ndef test_chip_coord_split(coord: Coord) -> Tuple[int, int]:\n    addr = Coord2Addr(coord)\n    high3 = (\n        addr >> ConfigFrame2Mask.TEST_CHIP_ADDR_COMBINATION_OFFSET",
        "detail": "paibox.frame.frame",
        "documentation": {}
    },
    {
        "label": "test_chip_coord_split",
        "kind": 2,
        "importPath": "paibox.frame.frame",
        "description": "paibox.frame.frame",
        "peekOfCode": "def test_chip_coord_split(coord: Coord) -> Tuple[int, int]:\n    addr = Coord2Addr(coord)\n    high3 = (\n        addr >> ConfigFrame2Mask.TEST_CHIP_ADDR_COMBINATION_OFFSET\n    ) & ConfigFrame2Mask.TEST_CHIP_ADDR_HIGH3_MASK\n    low7 = addr & ConfigFrame2Mask.TEST_CHIP_ADDR_LOW7_MASK\n    return high3, low7\n# 配置帧2型 est_chip_addr合并\ndef test_chip_addr_combine(high3: int, low7: int) -> Coord:\n    _high3 = high3 & ConfigFrame2Mask.TEST_CHIP_ADDR_HIGH3_MASK",
        "detail": "paibox.frame.frame",
        "documentation": {}
    },
    {
        "label": "test_chip_addr_combine",
        "kind": 2,
        "importPath": "paibox.frame.frame",
        "description": "paibox.frame.frame",
        "peekOfCode": "def test_chip_addr_combine(high3: int, low7: int) -> Coord:\n    _high3 = high3 & ConfigFrame2Mask.TEST_CHIP_ADDR_HIGH3_MASK\n    _low7 = low7 & ConfigFrame2Mask.TEST_CHIP_ADDR_LOW7_MASK\n    addr = (_high3 << ConfigFrame2Mask.TEST_CHIP_ADDR_COMBINATION_OFFSET) | _low7\n    return Addr2Coord(addr)\nclass FrameGen:\n    # 通用Frame生成函数\n    @staticmethod\n    def _GenFrame(\n        header: int, chip_addr: int, core_addr: int, core_ex_addr: int, payload: int",
        "detail": "paibox.frame.frame",
        "documentation": {}
    },
    {
        "label": "FrameType",
        "kind": 6,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "class FrameType(Enum):\n    \"\"\"Types of Frames\"\"\"\n    FRAME_CONFIG = 0\n    FRAME_TEST = 0x1\n    FRAME_WORK = 0x2\n    FRAME_UNKNOWN = 0x3\n# 帧头\n@unique\nclass FrameHead(Enum):\n    \"配置帧帧头\"",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "FrameHead",
        "kind": 6,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "class FrameHead(Enum):\n    \"配置帧帧头\"\n    CONFIG_TYPE1 = 0b0000  # 配置帧 1型（RANDOM_SEED）\n    CONFIG_TYPE2 = 0b0001  # 配置帧 2型（PARAMETER_REG）\n    CONFIG_TYPE3 = 0b0010  # 配置帧 3型（Neuron RAM）\n    CONFIG_TYPE4 = 0b0011  # 配置帧 4型（Weight RAM）\n    \"测试帧帧头\"\n    TEST_TYPE1 = 0b0100  # 测试输入帧 1型（RANDOM_SEED_REG）\n    TEST_TYPE2 = 0b0101  # 测试输入帧 2型（PARAMETER_REG）\n    TEST_TYPE3 = 0b0110  # 测试输入帧 3型（Neuron RAM）",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "FrameMask",
        "kind": 6,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "class FrameMask:\n    \"\"\"FrameMask 通用数据帧掩码 和 数据包格式起始帧掩码\"\"\"\n    GENERAL_MASK = (1 << 64) - 1\n    \"通用\"\n    # Header\n    GENERAL_HEADER_OFFSET = 60\n    GENERAL_HEADER_MASK = (1 << 4) - 1\n    GENERAL_FRAME_TYPE_OFFSET = GENERAL_HEADER_OFFSET\n    GENERAL_FRAME_TYPE_MASK = GENERAL_HEADER_MASK\n    # Chip address",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "ConfigFrame2Mask",
        "kind": 6,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "class ConfigFrame2Mask(FrameMask):\n    \"\"\"Frame #1\"\"\"\n    WEIGHT_WIDTH_OFFSET = 28\n    WEIGHT_WIDTH_MASK = (1 << 2) - 1\n    LCN_OFFSET = 24\n    LCN_MASK = (1 << 4) - 1\n    INPUT_WIDTH_OFFSET = 23\n    INPUT_WIDTH_MASK = 1\n    SPIKE_WIDTH_OFFSET = 22\n    SPIKE_WIDTH_MASK = 1",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "WorkFrame1Mask",
        "kind": 6,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "class WorkFrame1Mask(FrameMask):\n    RESERVED_OFFSET = 27\n    RESERVED_MASK = (1 << 3) - 1\n    AXON_OFFSET = 16\n    AXON_MASK = (1 << 11) - 1\n    TIME_SLOT_OFFSET = 8\n    TIME_SLOT_MASK = (1 << 8) - 1\n    DATA_OFFSET = 0\n    DATA_MASK = (1 << 8) - 1\n# 工作帧2 型（同步帧）",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "ConfigFrame1Mask",
        "kind": 5,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "ConfigFrame1Mask = FrameMask\n# 配置帧 2型\nclass ConfigFrame2Mask(FrameMask):\n    \"\"\"Frame #1\"\"\"\n    WEIGHT_WIDTH_OFFSET = 28\n    WEIGHT_WIDTH_MASK = (1 << 2) - 1\n    LCN_OFFSET = 24\n    LCN_MASK = (1 << 4) - 1\n    INPUT_WIDTH_OFFSET = 23\n    INPUT_WIDTH_MASK = 1",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "ConfigFrame3StartMask",
        "kind": 5,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "ConfigFrame3StartMask = FrameMask\n# 配置帧4 型（Weight RAM） 数据包起始帧\nConfigFrame4StartMask = FrameMask\n\"\"\"\n测试帧使用 FrameMask\n\"\"\"\n\"\"\"工作帧\"\"\"\n# 工作帧1 型（Spike，脉冲帧）\nclass WorkFrame1Mask(FrameMask):\n    RESERVED_OFFSET = 27",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "ConfigFrame4StartMask",
        "kind": 5,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "ConfigFrame4StartMask = FrameMask\n\"\"\"\n测试帧使用 FrameMask\n\"\"\"\n\"\"\"工作帧\"\"\"\n# 工作帧1 型（Spike，脉冲帧）\nclass WorkFrame1Mask(FrameMask):\n    RESERVED_OFFSET = 27\n    RESERVED_MASK = (1 << 3) - 1\n    AXON_OFFSET = 16",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "WorkFrame2Mask",
        "kind": 5,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "WorkFrame2Mask = FrameMask\n# 工作帧3 型（清除帧）\nWorkFrame3Mask = FrameMask\n# 工作帧4 型（初始化帧）\nWorkFrame4Mask = FrameMask\n# TODO: 在线学习处理核数据帧格式",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "WorkFrame3Mask",
        "kind": 5,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "WorkFrame3Mask = FrameMask\n# 工作帧4 型（初始化帧）\nWorkFrame4Mask = FrameMask\n# TODO: 在线学习处理核数据帧格式",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "WorkFrame4Mask",
        "kind": 5,
        "importPath": "paibox.frame.frame_params",
        "description": "paibox.frame.frame_params",
        "peekOfCode": "WorkFrame4Mask = FrameMask\n# TODO: 在线学习处理核数据帧格式",
        "detail": "paibox.frame.frame_params",
        "documentation": {}
    },
    {
        "label": "FrameHead",
        "kind": 6,
        "importPath": "paibox.frames.frames",
        "description": "paibox.frames.frames",
        "peekOfCode": "class FrameHead:\n    \"配置帧帧头\"\n    CONFIG_TYPE1 = 0b0000 # 配置帧 1型\n    CONFIG_TYPE2 = 0b0001 # 配置帧 2型\n    CONFIG_TYPE3 = 0b0010 # 配置帧 3型\n    CONFIG_TYPE4 = 0b0011 # 配置帧 4型\n    \"测试帧帧头\"\n    TEST_TYPE1 = 0b0100 # 测试输入帧 1型\n    TEST_TYPE2 = 0b0101 # 测试输入帧 2型\n    TEST_TYPE3 = 0b0110 # 测试输入帧 3型",
        "detail": "paibox.frames.frames",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "test.test_coord",
        "description": "test.test_coord",
        "peekOfCode": "x = Coord(1, 2)\nprint(x.x,x.y)",
        "detail": "test.test_coord",
        "documentation": {}
    }
]